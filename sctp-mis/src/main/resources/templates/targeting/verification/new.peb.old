{% extends "targeting/verification/base" %}

    {% block contextMenu %}
    <div class="container context-nav-container">
        <div class="buttons is-left">
            <a href="/verification" class="button is-danger">
                <span class="icon-text">
                    <span class="icon">
                        <i class="fa fa-chevron-left"></i>
                    </span>
                    <span>Back</span>
                </span>
            </a>
        </div>
    </div>
    {% endblock %}

    {% block content %}
    <div class="container">
        <div class="card" style="border-radius: 0px">
            <header class="card-header">
                <p class="card-header-title">Pre-Eligibility Verification</p>
            </header>
            <div class="card-content">
                {{ showMessages(successMessage, infoMessage, dangerMessage, warningMessage) }}
                <form method="post"
                      enctype="application/x-www-form-urlencoded"
                      action="/verification">
                    {{ csrf(_csrf) }}
                    <div class="content">
                        <div class="field is-horizontal">
                            <div class="field-label is-normal">
                                <label class="label">Program</label>
                            </div>
                            <div class="field-body">
                                <div class="field">
                                    <div class="control">
                                        <div class="select is-fullwidth">
                                            {{ selectField('program', programs, form.program, true) }}
                                        </div>
                                    </div>
                                    {{ printFieldErrors(getFieldErrors('form', 'program')) }}
                                </div>
                            </div>
                        </div>

                        <div class="field is-horizontal">
                            <div class="field-label is-normal">
                                <label class="label">Location</label>
                            </div>
                            <div class="field-body">
                                <div class="field">
                                    <div class="control">
                                        <div class="select is-fullwidth">
                                                {{ selectField('district', districts, form.district, true) }}
                                        </div>
                                    </div>
                                    {{ printFieldErrors(getFieldErrors('form', 'district')) }}
                                </div>
                                <div class="field">
                                    <div class="control">
                                        <div class="select is-fullwidth">
                                             {{ selectField('traditionalAuthority', traditionalAuthorities, form.traditionalAuthority, true) }}
                                        </div>
                                    </div>
                                    {{ printFieldErrors(getFieldErrors('form', 'traditionalAuthority')) }}
                                </div>
                            </div>
                        </div>

                        <div class="field is-horizontal">
                            <div class="field-label is-normal">
                                <label class="label">Village Cluster</label>
                            </div>

                            <div class="field-body">
                                <div class="field">
                                    <div class="control">
                                        <div class="select is-multiple is-fullwidth">
                                            {{ multiSelectField('clusters', clusters, form.clusters, true, 4) }}
                                        </div>
                                    </div>
                                    {{ printFieldErrors(getFieldErrors('form', 'clusters')) }}
                                </div>
                            </div>
                        </div>

                        <div class="field is-horizontal">
                            <div class="field-label is-normal">
                                <label class="label">Targeting Criteria</label>
                            </div>
                            <div class="field-body">
                                <div class="field">
                                    <div class="control">
                                        <div class="select is-fullwidth">
                                                {{ selectField('criterion', criteria, form.criterion, true) }}
                                        </div>
                                    </div>
                                    {{ printFieldErrors(getFieldErrors('form', 'criterion')) }}
                                </div>
                            </div>
                        </div>

                        <div class="field is-horizontal">
                            <div class="field-label">
                                <!-- Left empty for spacing -->
                            </div>
                            <div class="field-body">
                                <div class="field">
                                    <div class="control">
                                        <div class="level">
                                            <div class="level-left">
                                                <div class="level-item">
                                                    <button id="btnCount"
                                                            class="button is-info"
                                                            type="button">Count Matching Households</button>
                                                </div>
                                                <p class="level-item"><strong id="householdCount">&nbsp;</strong></p>
                                            </div>
                                            <div class="level-right">
                                                <p class="level-item">
                                                    <button class="button is-primary" type="submit">Apply</button>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    {% endblock %}
    {% block footerScripts %}
    <script>
        (function(){
            let disabledOpt = new Option('Select Option', -1);
            disabledOpt.disable = true;
            window.renderOptions = function(list, promise, prepend, useExtraField){
                list.length = 0;
                if(prepend){
                    list.options.add(disabledOpt);
                }
                promise.json().then(items => items.forEach(item => list
                    .options.add(new Option(item.text, useExtraField ? item.extra : item.id))));
            };
            window.getOptions = function(url, onSuccess, onError){
                var params = { method: 'GET' };
                try {
                    fetch(url, params)
                    .then(r => onSuccess(r))
                    .catch(e => onError(e));
                }catch(e){
                    onError(e);
                }
            };
            let parameters = {districtCode: 0, taCode: 0, criterionId: 0, clusterCodes: []};
            let updateCountButton = () => {
                btnCount.disabled = parameters.districtCode === 0
                    || parameters.taCode === 0
                    || parameters.criterionId === 0
                    || parameters.clusterCodes.length === 0;
                console.table(parameters);
            };
            btnCount.onclick = function(){
                let updateStatus = (s) => householdCount.innerText = s;
                let onSuccess = (p) => {
                    p.text().then(count => householdCount.innerText = `Matching households: ${count}`);
                }
                let errorHandler = (r) => {
                    if(!r.ok){
                        throw Error(r.statusText);
                    }
                    return r;
                };
                let onError = (e) => {
                    console.log(e);
                    alert('There was an error when counting matching households.');
                }
                let getOptionValue = (parameter, selectElement, label) => {
                    var options = selectElement.selectedOptions;
                    if(options.length == 0){
                        updateStatus(`Selection is required for ${label}`);
                        return false;
                    }
                    if(selectElement.multiple){
                        parameters[parameter] = [];
                        Array.apply(null, options).forEach((o) => parameters[parameter].push(parseInt(o.value)))
                    }else{
                        if(!/^[0-9]+$/.test(options[0].value)){
                            updateStatus(`Selection is required for ${label}`);
                            return false;
                        }
                        parameters[parameter] = parseInt(options[0].value);
                    }
                    return true;
                }
                if(!getOptionValue('districtCode', district, 'district')){
                    return;
                }
                if(!getOptionValue('taCode', traditionalAuthority, 'traditional authority')){
                    return;
                }
                if(!getOptionValue('clusterCodes', clusters, 'clusters')){
                    return;
                }
                if(!getOptionValue('criterionId', criterion, 'criterion')){
                    return;
                }
                try {
                    const params = {
                        method: 'POST',
                        headers: {
                            'X-CSRF-TOKEN': csrf()['token'],
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(parameters)
                    };
                    fetch('/verification/count-matching-households', params)
                    .then(errorHandler)
                    .then(r => onSuccess(r))
                    .catch(e => onError(e));
                }catch(e){
                    onError(e);
                }
            };
            window.loadLocations = function(target, sender, prepend, useExtraField, type){
                var code = sender.selectedOptions[0].value;
                getOptions(
                    `/locations/get-household-locations/${type}?parent-code=${code}`,
                    function(data){
                        renderOptions(target, data, prepend, useExtraField);
                    },
                    function(error){
                        console.log(error);
                        alert('There was an error getting locations from the server.');
                    }
                 );
            };
            district.onchange = function(){
                clusters.length = 0;
                //parameters.districtCode = district.selectedOptions[0].value;
                //updateCountButton();
                loadLocations(traditionalAuthority, this, true, true, 'SUBNATIONAL2');
            };
            criterion.onchange = () => {
                //parameters.criterionId = criterion.selectedOptions[0].value;
                //updateCountButton();
            };
            traditionalAuthority.onchange = function(){
                //parameters.taCode = traditionalAuthority.selectedOptions[0].value;
                //updateCountButton();
                loadLocations(clusters, this, false, true, 'SUBNATIONAL3');
            };
            clusters.onchange = () => {
                //parameters.clusterCodes.length = 0;
                //updateCountButton();
                //Array.apply(null, clusters.selectedOptions).forEach((o) => parameters.clusterCodes.push(o.value))
            }
        })();
        </script>
{% endblock %}
